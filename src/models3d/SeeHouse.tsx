/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Alena Shek (https://sketchfab.com/ShekAlena)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/sea-house-bc4782005e9646fb9e6e18df61bfd28d
Title: Sea House
*/

import { useRef, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { useThree, useFrame } from '@react-three/fiber';
import { a } from '@react-spring/three';
import type { Mesh, Material } from 'three';
import type { GLTF } from 'three-stdlib';

import seeHouseScene from '../assets/3d/sea_house.glb';

type GLTFResult = GLTF & {
    nodes: {
        Object_2: Mesh;
        Object_3: Mesh;
        Object_4: Mesh;
        Object_5: Mesh;
        Object_6: Mesh;
    };
    materials: {
        '11112_sheet_Material__25': Material;
        '11112_sheet_Material__37': Material;
        'default': Material;
    };
};

interface SeeHouse3DProps {
    isRotating?: boolean;
    setIsRotating?: (isRotating: boolean) => void;
}

export default function SeeHouse3D(props: SeeHouse3DProps) {
    const { isRotating, setIsRotating } = props;
    const { nodes, materials } = useGLTF(seeHouseScene) as GLTFResult;
    const houseRef = useRef<any>(null);
    const [isDragging, setIsDragging] = useState(false);
    const [previousMousePosition, setPreviousMousePosition] = useState({ x: 0, y: 0 });
    const { camera } = useThree();

    useFrame((state, delta) => {
        if (isRotating && houseRef.current) {
            houseRef.current.rotation.y += delta * 0.01;
        }
    });

    const handlePointerDown = (event: any) => {
        setIsDragging(true);
        setPreviousMousePosition({
            x: event.clientX,
            y: event.clientY
        });
    };

    const handlePointerMove = (event: any) => {
        if (!isDragging) return;

        const deltaX = event.clientX - previousMousePosition.x;
        const deltaY = event.clientY - previousMousePosition.y;

        if (houseRef.current) {
            houseRef.current.rotation.y += deltaX * 0.01;
            houseRef.current.rotation.x += deltaY * 0.01;
        }

        setPreviousMousePosition({
            x: event.clientX,
            y: event.clientY
        });
    };

    const handlePointerUp = () => {
        setIsDragging(false);
    };

    return (
        <a.group
            ref={houseRef}
            onPointerDown={handlePointerDown}
            onPointerMove={handlePointerMove}
            onPointerUp={handlePointerUp}
            onPointerLeave={handlePointerUp}
            style={{ cursor: 'pointer' } as any}
        >
            <group rotation={[-Math.PI / 2, 0, 0]}>
                <mesh
                    geometry={nodes.Object_2.geometry}
                    material={materials['11112_sheet_Material__25']}
                />
                <mesh
                    geometry={nodes.Object_3.geometry}
                    material={materials['11112_sheet_Material__25']}
                />
                <mesh
                    geometry={nodes.Object_4.geometry}
                    material={materials['11112_sheet_Material__37']}
                />
                <mesh
                    geometry={nodes.Object_5.geometry}
                    material={materials['11112_sheet_Material__37']}
                />
                <mesh
                    geometry={nodes.Object_6.geometry}
                    material={materials['default']}
                />
            </group>
        </a.group>
    );
}

useGLTF.preload('/sea_house.glb');

